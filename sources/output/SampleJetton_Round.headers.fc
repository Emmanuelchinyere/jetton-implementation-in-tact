;;
;; Header files for Round
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_load_address_opt
(slice, slice) __tact_load_address_opt(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_store_address_opt
builder __tact_store_address_opt(builder b, slice address) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_slice_int
(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_get_slice_int
int __tact_dict_get_slice_int(cell d, int kl, slice k, int vl) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_slice_eq_bits_nullable_one
int __tact_slice_eq_bits_nullable_one(slice a, slice b) inline;

;; __tact_int_eq_nullable_one
int __tact_int_eq_nullable_one(int a, int b) inline;

;; $TokenTransfer$_store
builder $TokenTransfer$_store(builder build_0, (int, int, slice, slice, cell, int, slice) v) inline_ref;

;; $TokenTransfer$_store_cell
cell $TokenTransfer$_store_cell((int, int, slice, slice, cell, int, slice) v) inline;

;; $TokenNotification$_load
(slice, ((int, int, slice, slice))) $TokenNotification$_load(slice sc_0) inline;

;; $GetWeighted$_store
builder $GetWeighted$_store(builder build_0, (slice) v) inline;

;; $GetWeighted$_store_cell
cell $GetWeighted$_store_cell((slice) v) inline;

;; $PassScoreToRoundContract$_load
(slice, ((slice, int))) $PassScoreToRoundContract$_load(slice sc_0) inline;

;; $AdminUploadJettonWalletData$_load
(slice, ((int, slice, int, slice, slice))) $AdminUploadJettonWalletData$_load(slice sc_0) inline;

;; $UserClaim$_load
(slice, ((int))) $UserClaim$_load(slice sc_0) inline;

;; $WeightLog$_store
builder $WeightLog$_store(builder build_0, (int, slice, int) v) inline;

;; $WeightLog$_store_cell
cell $WeightLog$_store_cell((int, slice, int) v) inline;

;; $Round$_store
builder $Round$_store(builder build_0, (int, slice, slice, int, slice, int, slice, int, int, cell, int, cell, int, slice, int) v) inline;

;; $Round$_load
(slice, ((int, slice, slice, int, slice, int, slice, int, int, cell, int, cell, int, slice, int))) $Round$_load(slice sc_0) inline;

;; $RoundData$_to_external
(int, slice, slice, int, slice, int, slice, int, int, int, int, int) $RoundData$_to_external(((int, slice, slice, int, slice, int, slice, int, int, int, int, int)) v) inline;

;; $Round$init$_load
(slice, ((int, slice, slice))) $Round$init$_load(slice sc_0) inline;

;; $Round$_contract_init
(int, slice, slice, int, slice, int, slice, int, int, cell, int, cell, int, slice, int) $Round$_contract_init(int $project_id, slice $ido_contract, slice $staking_contract) impure inline_ref;

;; $Round$_contract_load
(int, slice, slice, int, slice, int, slice, int, int, cell, int, cell, int, slice, int) $Round$_contract_load() impure inline_ref;

;; $Round$_contract_store
() $Round$_contract_store((int, slice, slice, int, slice, int, slice, int, int, cell, int, cell, int, slice, int) v) impure inline;

;; $global_emptyCell
cell $global_emptyCell() impure inline;

;; $Cell$_fun_asSlice
slice $Cell$_fun_asSlice(cell $self) impure inline;

;; $global_emptySlice
slice $global_emptySlice() impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $global_emit
() $global_emit(cell $body) impure inline;

;; $Round$_fun_get_user_list_this_round
((int, slice, slice, int, slice, int, slice, int, int, cell, int, cell, int, slice, int), cell) $Round$_fun_get_user_list_this_round((int, slice, slice, int, slice, int, slice, int, int, cell, int, cell, int, slice, int) $self) impure inline_ref;

;; $Round$_fun_get_user_weights_in_this_round
((int, slice, slice, int, slice, int, slice, int, int, cell, int, cell, int, slice, int), int) $Round$_fun_get_user_weights_in_this_round((int, slice, slice, int, slice, int, slice, int, int, cell, int, cell, int, slice, int) $self, slice $user) impure inline_ref;

;; $Round$_fun_get_user_score_list
((int, slice, slice, int, slice, int, slice, int, int, cell, int, cell, int, slice, int), cell) $Round$_fun_get_user_score_list((int, slice, slice, int, slice, int, slice, int, int, cell, int, cell, int, slice, int) $self) impure inline_ref;

;; $RoundData$_constructor_project_id_owner_second_owner_end_time_round_contract_jetton_wallet_convert_rate_upcoming_token_jetton_wallet_amount_of_upcoming_token_is_inject_funds_is_open_pariticipators_weights_total
((int, slice, slice, int, slice, int, slice, int, int, int, int, int)) $RoundData$_constructor_project_id_owner_second_owner_end_time_round_contract_jetton_wallet_convert_rate_upcoming_token_jetton_wallet_amount_of_upcoming_token_is_inject_funds_is_open_pariticipators_weights_total(int project_id, slice owner, slice second_owner, int end_time, slice round_contract_jetton_wallet, int convert_rate, slice upcoming_token_jetton_wallet, int amount_of_upcoming_token, int is_inject_funds, int is_open, int pariticipators, int weights_total) inline;

;; $Round$_fun_round_data
((int, slice, slice, int, slice, int, slice, int, int, cell, int, cell, int, slice, int), (int, slice, slice, int, slice, int, slice, int, int, int, int, int)) $Round$_fun_round_data((int, slice, slice, int, slice, int, slice, int, int, cell, int, cell, int, slice, int) $self) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode_bounce_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline;

;; $GetWeighted$_constructor_applied_user_address
((slice)) $GetWeighted$_constructor_applied_user_address(slice applied_user_address) inline;

;; $WeightLog$_constructor_weight_total_pariticipator_return_score
((int, slice, int)) $WeightLog$_constructor_weight_total_pariticipator_return_score(int weight_total, slice pariticipator, int return_score) inline;

;; $SendParameters$_constructor_to_value_bounce_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice to, int value, int bounce, int mode, cell body) inline;

;; $TokenTransfer$_constructor_queryId_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload
((int, int, slice, slice, cell, int, slice)) $TokenTransfer$_constructor_queryId_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload(int queryId, int amount, slice destination, slice response_destination, cell custom_payload, int forward_ton_amount, slice forward_payload) inline;
